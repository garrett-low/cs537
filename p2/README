Garrett Low
low

Description for P2B: xv6 MLQ scheduler

MLQ behavior:
Modified functions:
* circleQueue.c, circleQueue.h
* proc.c - userinit()
* proc.c - fork()
* proc.c - scheduler()
* proc.c - getpri(), sys_getpri()
* proc.c - setpri(), sys_setpri()
* proc.c - getpinfo(), sys_getpinfo()

* Four priority queues PQ0-PQ3 are implemented as circular array queues.
    * Queue of PIDs
    * Reused code from a previous class.
* Entry points to the queue:
    * when proc is enqueued, increment qtail for that priority
    * userinit() - for the initial process, enqueue on PQ3
    * fork() - for every other process, enqueue on PQ based on parent priority
* Scheduler
    * Find the highest PQ that is not empty
    * Find the front of the line for the highest PQ
    --> Now have PID to run for the next tick
    
    * With PID, find in ptable the proc p that should run
      * Increment tick for this proc
      * RR PQ0-2
        * Determine if this proc is finished with time slice (PQ0-PQ2)
        * If done with time slice, then dequeue and enqueue
        * Subsequent scheduler() will find and run the next proc
      * FIFO PQ3
        * Just continue, no dequeue/enqueue. Just the tick from above
        
    * "Lower-level" context switch code left unchanged
* Syscall - setpri()
    * PID invalid if cannot be found or if state is UNUSED
    * Pri invalid if not 0-3
    * Use PID to lookup proc p in ptable
      * Check proc state
      * Remove proc from current PQ position
      * Enqueue in PQ (can be same PQ, still move to end)
      * Increment qtail
* Syscall - getpri()
    * PID invalid if no corresponding proc or state UNUSED
* Syscall - getpinfo()
    * Only failure case is null pointer for status param
* Syscall - sys*() - declared with void args, call into real functions using
    arg* functions from syscall.c

State/Definitions:
* proc.c
    * declare constants: timer ticks, number of queues
* pstat.h
    * move enum procstate to pstat.h and #include pstat.h in proc.h
* proc.h
    * new members: prio, ticks[4], qtail[4]
* proc.c
    * new global static members: pq0, pq1, pq2, pq3
* syscall.c
    * map function pointer: sys_getpri, sys_setpri, sys_getpinfo
* syscall.h
    * new sys call number: sys_getpri(22), sys_setpri(23), sys_getpinfo(24)
* sysfunc.h
    * new sys call handler: sys_getpri, sys_setpri, sys_getpinfo
* usys.S
    * add SYSCALL: getpri, setpri, getpinfo
* user.h
    * add function prototype: getpri, setpri, getpinfo
* kernel/Makefile.mk
    * add *.o files
* Confirm CPUS in Makefile set to 1. Only consider 1 CPU for this prj.